#!/usr/bin/env python3
import requests
import json
import time
import random
from concurrent.futures import ThreadPoolExecutor
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
import socks
import socket
from datetime import datetime

# API Keys 列表（留空，由用户填写）
API_KEYS = [
    "gaia-NWZhZmY5NzgtZmJlMi00ODdlLWI3MTQtZWMzZmQxZmE4ZTlh-iEzpQPQ-bL8PRczQ",
    "gaia-YTY1NzhkMDAtNTNjMi00ZTAyLTg5OTYtODJmODhmZGM2NzUw-gegHvPzy9Px48qik",
    "gaia-YzVhYmJmNzEtNDVjOC00YWY1LWIxN2ItODc3MzkzMWExMjk4-RiivUx5gCyKTp1Dp",
    "gaia-Y2Q1MTQwNmItODc2Yi00YjI1LThiYWEtMWE1MjBmMjQ2NWZm-PU34_Wp0gGuvseCA",
    "gaia-MTQ3MzAzZDQtNzk1NC00YTFiLThhMTYtMTcxNDc2OGQ5MTg2-M8unSeHUU5dE0Rgk",
    "gaia-MWY1OTI4YzEtMThiYS00MmM2LWFmOTctMTg5M2EyM2FjMDNj-jX2J4sUUvi9WmSeA",
    "gaia-Njk1NzI4MzQtZmViMC00YzkwLWIwM2UtNGU3ZTRkMmVjMjRi-zdzkBFC7vZ4O59-F",
    "gaia-YWE0OGU4NjktODkwNy00YzYwLTkzZDgtNzg0N2U2Y2Q4MDA1-MwrZSIIiSjg0H-1V",
    "gaia-NGYyYzBlZGEtYjJkYi00MGY4LWIxY2MtYWIzYjVjZThiZjM2-22wiwQnoUImaiO8p",
    "gaia-NzlkNmNiZDgtMDJiYS00Y2UzLWFiZTQtYWI5ZWFiYWUxMWRl-05srtyRnQdHwb7am",
    "gaia-ZjVhMGE0MDItMDNlNy00MDZmLThmNjAtZWVjNmNlYThmNDMx-BLDMpVikAt6z_ZTh",
    "gaia-NDBjZDFiZWYtYWY4MS00NTVmLTgzNzktOGJiZjI1ODVmOTk1-FoVfUzfiMJfQRa84",
    "gaia-YTdjNGY5MzYtMWNlZC00ZDA2LThmZDctODZjNTVlMjkyMjk3-JmO20mbHX0lF-HUB",
    "gaia-NWFiZmU4NmYtZTg4NS00MjU2LTk3OTgtZDMzMjhlZjFkNWU1--0WQB79ZX1wo9Zt-",
    "gaia-MTMwNjFiZjktYmE3ZC00NDBlLTk3NGQtYzEwYTZkMTVhNzFj-SwI68nsiDwT0Cu7S",
    "gaia-MTlmZmJjMDctZTVhMC00YWNkLWJhZmEtMTA4NWJmMGNiZDc0-91frYHMa4KFMAPOK",
    "gaia-NDViZGFlMTUtYTUxNC00ZTIwLWFlNDAtNjUxODVlYmFjZDZl-di-vGD_-kCpvDeZE",
    "gaia-YTM0NDQ5ODktMGNkYy00ZjFlLThmZWItY2I1ZTE5ZDgwYjA5-cdC-DVZSj0mJL-dT",
    "gaia-ZWU1YjE4NDEtYjIxMi00MTYwLWE3YjgtODU2NTE5NzZhZDc4-H6nX2RxQcsWDdpju",
    "gaia-MWZkOGRiNmQtNDNjNS00MWRhLWI4NjYtNTZiMTU5NGQ5Yjc0-hWSWMI1oL9NskR2_",
    "gaia-Y2VmMzhiZmItMzVjNy00Nzk1LWE1NGUtZDUxMTk0MTZlY2Yw-kfHoFMfgsUnWGh1v",
    "gaia-NGQyNDM4ZTItOThiMC00M2M2LTg4M2ItNWVmYjBhYjhkNDBh-ab7ejAOk1ebIkBXU",
    "gaia-ZmYwN2M3ZDctYjhmYi00OTg2LWEyODEtYTkxNjAzMzhhMDRi-Yt8fAsUW7h0R3tFw",
    "gaia-NzczYTEzY2QtYjQ1NS00YjdkLTgxYjQtM2RkZjEzOTA5NzY2-6X0nv6p4u0Z2WtNJ",
    "gaia-NTI5OTljYzMtOWZkNi00ZTQ2LThkMzEtZmJmMGRmZmU5MzYx-BZDAAhzp64geTYvg",
    "gaia-ZmQ4MTQ3NDQtZjg0Yy00M2VlLWFiNzItYzdjODE0MWE2MjNi-K-czpgz3cV-g1sG0",
    "gaia-NDYwNjg0MTMtYmQ2Yy00ZWMwLWIxNDctMzY5NjRiNjczZTRk-CJctcqB_GVatWzRz",
    "gaia-MzEzZDRhMDQtYTdjNi00ZjVlLWIyN2EtYTcwNTJmMzQ4OTE2-iKhXw6NWDKhE9ayl",
    "gaia-NGU4YWJkMDYtZjc3OS00Y2RjLWI3NjgtMGViMWI4MzU3ZmY4-uP5XHraam2zZKZtM",
    "gaia-NDY5ZDEwMWQtNjA2Ni00MDQ0LWFmZjMtNDZiYTJmNjU4OWU3-kQikW6nuCe2Yu5Pz",
    "gaia-YmVkMTM4ZWUtNDI0MS00YzcyLTg1NzAtNjIzNTllNzNhOTZh-V5OYB8KJK47mxyzV",
    "gaia-ZGUxNjc4MzktNDM1Zi00YWNmLTk1MjYtYTNhNmYwNWUwOTMz-Kk51VekNInPs92LN",
    "gaia-MjZlYjMwOWQtMDIyYi00N2QyLTliZmItNTU5MWU3MjEwN2Q5-7oF_i3lVq768M21M",
    "gaia-ZDMxMjY4MDQtNDMxOS00NTRhLWJkNWQtZGM4NzE4N2M4NzIw-Uj8wCY53AXMPxGSY",
    "gaia-NjMzYmZkNTEtM2FkNy00NDY3LTlhMDgtMWIyOGM5Mzc1YWU0-hGPshZWqEpHgeBXE",
    "gaia-ZWYwMTc2NzItZGYxNi00NmNlLTgyMTItYzdiOWUwNTBiODk5-FeVOChz3qxhUV2mV",
    "gaia-MGYwYmRjNjYtZmUyOC00MTgxLThmNGItOTM2YzQ1NmFkNTZi-LUnqOX5F1_ykwODT",
    "gaia-YmFhY2QzYjUtYzBlZS00YWFmLWIyZTUtZjMwMTc1ZTIyNDZm-O2ZYPCBvtUzZOGFV",
    "gaia-Y2ZjMTI4ZTItY2EzMi00Y2FhLWE5YTctNGQ5ZTNkNGI4YmE0-BqyzjrvL_nY07j8a",
    "gaia-MmM0MjBiNmUtZGQ1Ni00OWI0LWE3NWQtMjJkZGZhMmM4N2Ni-mS-WvpeLflxDkx2l",
    "gaia-MmRmMjFmZDItOGVmNC00OGYyLTg3ZTctNGFjMjU5ZWYzMWEz-cvoUMixwdGov1WrK",
    "gaia-YWZlZGY4MzAtNjEyYS00OWVlLWEyM2EtMWE1YzJiNTQ4M2I2-N7v4PPLuRJQJ2hqU",
    "gaia-OWYxNjVlOTQtMTYxNC00NmEzLWFiMjItMWVkODE4MWFkYzFi-8uogjS-Pf3rAFwbr",
    "gaia-MWQwYjExZTAtMTYzMy00NTRkLTk3YjQtNDFmN2M3MTJjMDMx-XrBq0WeoIRr4fXIN",
    "gaia-NTZlMWVkMDktYWQyYy00MjhlLTg1MjUtMmViYWRmYjViN2My-jE5rQ8fAfKtV5BsM",
    "gaia-MTBjOGNjM2EtZDE0ZC00ZGE3LTgzMjEtYjk2ZjY5OTBlM2Q5-b84wtSo-xCZ_Zy7V",
    "gaia-NzVlMTYzN2UtNmNjMy00YTFlLTg1ZGEtYjE0NzVmM2U0YmIw-gdqjrNA71Vw0Czjj",
    "gaia-ZTIxMjhmZDAtM2RmMi00MjE3LWI4ZmUtM2E3NTI3ZThmNWNj-0ad_sDjJv6NNxn4u",
    "gaia-YWY0NjE4YjQtZTFjYS00MGFhLWExNDQtMTEyMzE2ZTVjMDg5-XSUWlhFpeofQJa0I",
    "gaia-MzNmNzhkOTQtM2EyZi00MTM2LThlMWEtMTIwYmE0MDRmNTQz-cCMzMbA35Ev5lp49",
    "gaia-NTA0MTQyMmYtODVkYy00MDJiLThiODEtODg2OTk1MmMzZTE3-W_ieID9K3CZu_LEo",
    "gaia-ZGRhYjRkODMtOTM1OS00MGM5LTk5ZmYtZmZjNmJiM2IxMDk4-4r1QwtEc1UWMqsHE",
    "gaia-MDBhY2YyNzctZGE1OC00YjI0LTk3NjQtNTg1YWY3ZjUxMDBh-0ZCgdbUqGtutrZ2y",
    "gaia-NDRkZmIzMzEtYWY0OS00ZjllLTg2MGQtYjY1NGZjMDk4NTk5-IFG9yMS7zDoct1fn",
    "gaia-NDQzOWUyMDAtN2YzNy00ZjIyLTk1ZjYtNTdhZjAwYWJmZmQz-x6bMnYehe2E3ELrm",
    "gaia-ZDI3ZDVmNmItMTY3OS00NmI3LTk1ZGMtYmQ2ZDYwMGU4MmY3-JHNxITIsctZFXJWO",
    "gaia-MWQyZDA1NzAtOTVkZS00NmY5LWE2MDYtOWQ5NTEyZjcwODNh-8vm3Z4EmHy-Q3UYV",
    "gaia-OTdlMzA3MTEtMGEzNy00YmI5LWJlMGItNjIwMzVmNGExYTg4-W_eQH_w5oKv6V8pJ",
    "gaia-MGYwYWY5NGYtZTk0YS00ZGJmLTg4Y2MtNmI0YWQyZWRhYTM5-AKYQxVaNkqDmtDDc",
    "gaia-MmI4NzAxOGYtMmZkNS00YjE1LTk2OWMtMDAxYjljYmQzYWRj-K1f17h879VmYpm--",
    "gaia-NTcyNmZlYTYtMjU5Zi00ZDFiLTk0ZjQtN2QzY2VlNTUzOGVk-3tlrkKJIVNPJSr8M",
    "gaia-NzhlYWIwNDEtNDJkNC00MjhhLWFiMjctOWFjMzJjZmZhNTI4--s9zC_KtgNqzR9Pg",
    "gaia-YjYzZjQ4MGYtYmU5MC00ZjRhLWI3MjctZjk3MzdkY2I4YmVi-v-ppCvuM-gqEgeXl",
    "gaia-MmEzZjk2MzgtZjM3My00MDM0LWFiNDgtYWRlZjQ4OTk1MTQx-dLRee5vuGmn8EqfQ",
    "gaia-MDFiM2FjY2QtNjBkNC00MjQxLTljMDgtZmQ0ZGU2ZjMwNzlm-rx2rvKMEhLSHOgh1",
    "gaia-YzRlNTAwNzMtYjZhMS00MGRjLWFmOGMtN2MxMWJkMWJjYWY2-aow9of2v9TNMdXuf",
    "gaia-MTRiNzY3NWQtNmY5Ny00MmY0LWI1M2UtMzlkYjA3NzNlYWQ1-7q50or3KxzP8yGy5",
    "gaia-YmIzNGYyYzQtMzFiNy00NzlmLWE5NzYtMDlkMzMyMGMzNjJj-QMLPV9VW_3yUPpHL",
    "gaia-NTMxMmVjOWUtZmY2MC00ZDRlLTk4M2YtYzMyOWYyM2NiMGUx-6SQUzI92CkqzzYlA",
    "gaia-MTAxOGIyNjktOTBhMS00ODMwLThmNGItMTI2MmY5MDJlNjFh-RiCLj3eGLiX42wmy",
    "gaia-MGI5MzMyYTgtYTllZC00M2ZjLTg0OGUtMzkzOWRmNWY1MmY4-aGYbTz9fY5IDZv9j",
    "gaia-YTZiNzA5NzItMGY0MS00NDcwLTkwMDctZjI5M2Y2Mzc0NWMy-Gk4RU6Mu1OREzCxP",
    "gaia-Mzk0NGQ5NzQtMWI1MS00NGIxLWIxMmUtZmE3NDM4NWNjMzc1-K6Gy-OvvGxlVusPH",
    "gaia-MmNiZjE2NGMtNmI4ZS00ODBkLWJkMzYtODhhNjM0YjAxNjYw-2xZT6cIDkAygoJVm",
    "gaia-Y2E2MzE5NjctZmIyZi00YTljLWFjNmUtNWM4Y2RmNzQ4ZmJi-qBfCu6kCtB4ZtljO",
    "gaia-NjdhODdlODAtNDIwOC00ZjVhLWFkZDYtZTYxMTA1MGVkZjMy-V0uhahjfWFYhQFGY",
    "gaia-ZTgyZWRmZmMtNDk5Ny00NmQ2LWI2NGYtYjk1OGI1ZGM5NWRj-z20w7WwZR66kWd0D",
    "gaia-NjA2OGZmZTAtNDMwYy00ODY3LWJiYTAtNmMyMDk4ZjRjZDc3-mnPEMwQOE97wbJEY",
    "gaia-NGYzNTIyNmEtYjZkMC00ZTg5LTkzYjUtNGYzMTg2NzE4NDYw-3wG-tv4vcEXv0w62",
    "gaia-NTllMjNkN2YtZDBjMC00ZTJjLWE1NjYtMjc5NmZhY2VlNjU0-DiOzUnz6fh87XFv9",
    "gaia-OTkxN2RmZDMtMThmYy00OTZmLTg1OWQtNWFmMGYyYjlkZDll-ftFC0H7elF4bZ91I",
    "gaia-YmJjMTM5ODAtZmZiMS00MDcyLTljNjktZDQwYjVjMmJjY2U4-rv3d0fFKQAmANLIo",
    "gaia-ZjBmNWEyNjgtYmE0Ny00Y2E4LWI5YmItYTg2MTkxMDI1NWEx-Pm9h6zUCR2uDIaUg",
    "gaia-YmMxYTU4ZmItMDA5ZS00MGEzLWE2YjQtMmFlMGMxMDQxOTFj-SaNW0stTS190m1zv",
    "gaia-NjkxZjc5OWUtMmY2NC00NGZlLTkyZTAtNTBlMmY0YzUyYmIw-eoxCgeiPFnI8Htow",
    "gaia-YTFjYWFjNDctN2M5YS00M2M1LThkNDctN2VmNGUxMWEzM2Ji-Uh0CXY7dZoiwtOCo",
    "gaia-ZGYxNWNlMDUtMDg1ZS00Y2JiLThjOTYtMWMyMjZiNDA4YTll-9TJ1g01OlsqAiNaR",
    "gaia-YTczOWYwOTgtY2QzOC00MThmLTg1ZDgtNzhiY2IwN2M5MTBh-gfEuWhCiPE8Wy83A",
    "gaia-NzBlZWI5ZTktZjExZS00ODU5LWE5OTQtYjg5ZThlYWI3OTY0-GMNcvAVctTiOd1Kh",
    "gaia-ZGUxNjc4MzktNDM1Zi00YWNmLTk1MjYtYTNhNmYwNWUwOTMz-Kk51VekNInPs92LN",
    "gaia-MGQ5N2IyOTYtMDgyOS00NzUyLWI0YWUtNmY2MjRkZTdhNzA0-wdyjxGGDcQ4w3-Ub",
    "gaia-MmZiMGE0ZTMtYTg0MC00YzExLTk0NGYtYzkzZTEwMWY1MzUz-X6RpVbgO7u6aMPIc",
    "gaia-ODk3NTQyOWQtY2U1ZS00NmVmLWI5MTUtNzM2ZDcyMzgyM2Yz-P65qykVR-sflrLHJ",
    "gaia-ODUxZjUxYWItZWI4ZC00MTU4LThmNGUtNjgxODQxODhiZDNm-c8U2AoCA9GrXjTG2",
    "gaia-YjYwNzJkMGEtM2EyMC00ZWQ2LTg5M2UtYWJmZjllYjZlYzI2-AucPdVxWC8jQqdbU",
    "gaia-M2JlNjQ0ZDEtNDdkOS00ZDg2LTk0ZTQtNWU2MGJlYzUzM2U2-UGS6Wry-FoySqB8Q",
    "gaia-MzQ5MzY1YzEtZjEyNC00ZTM4LTgyNDAtY2QwNGZkY2RiNmYx-kwxWuLAzSb9dblD6",
    "gaia-NzdlNmMwM2MtZTE1OS00NjVmLWE4ODMtMWI5OWI1MWJjYmJk-qbGZywyo5WncOpon",
    "gaia-OTIyNzljMWMtMzcwYS00NzVmLTgzYmUtNWM4ZWJiNzUxZTZi-HMstOT-cq4HEXKD6",
    "gaia-YzI3NmFmZTAtMmYzYi00OTJkLWEyN2QtYWQ2YzA3NmMyOGI2-9_BQMFcVE6NJPpcM",
    "gaia-YzMwODE5Y2YtYzgwMS00Yzk3LTk0MmYtMTE2MTI4YWE0M2Rh-qcs6MmtLw4ZXPvAI",
    "gaia-MDk4ZDUyMDktMTc5OS00OWQ2LTg5ODUtZjA2MDg4OWEzNWVi-ALzTNiajXdazcg_G",
    "gaia-NmVlOGMzYTktMzM0Yy00NmEyLTg3YjItMjM5ZGI5OGE2MGE1-WODkpRQWiC22UhiU",
    "gaia-NTFhNjg3NjMtYzY0Zi00NmY4LTk2NjQtZjIzMzVjZTQ4YzIz-Bd9cLKK0BxDUL7He",
    "gaia-YTU5NTBjN2UtMzhmZC00NjY5LWE2MGUtYWUzY2ExMzgxNGM1-ptwmnYU9qaLt-itB",
    "gaia-ODAyM2ZiMTEtNjMzNC00ZDRkLWExZTctMWEzMzJiNzVmNjg5-5JFCAonOUXY4vMoK",
    "gaia-ZjI1YjEyYTQtOTY1OS00OTE2LTlkNTktM2Q2ZGIwODM1MTE3-6Tdkiizf5Vt14a1v",
    "gaia-YWNiNzAxMzItNjRhYS00N2M4LWFiYTktYmY5Njc4ODVmZDMx-fkaIySgcx0s0wWva",
    "gaia-NGRmNDdjMWItODNiYi00OTNlLWI3OGEtY2IwNWY4NWZlM2I2-XNahpFlEmDdzkd7d",
    "gaia-OTk0NWUwYjYtNjU5OC00ODZkLWE3MjYtNmViZWVhMzhjNWFi-tUiReTM6GQ4_RkUS",
    "gaia-NzBkZmFhZGUtZTIxNS00YTBjLWIyOGItNjU2ZDgyMmMxZjM2-4WftIY1fsS8jhxXj",
    "gaia-ZjM3NzRkNTYtYWY0MC00MjYwLWIzMGUtZjc0OGRiMDU2N2U3-H98Vj59g2vGwzCfZ",
    "gaia-NmNiMjA1MWQtMjg0OC00NGRiLWIzNTctNTczMDYyZTk1MWZl-akNNazj4wogM0K7K",
    "gaia-YmU0OGZlZDMtMzJhYy00MjI5LWFkNWQtNjEzODVhYjQ2ZGQz-73QKGjojHBuKEtgN",
    "gaia-NjA0MTBhZmQtOGM1MS00MDdhLWE2N2ItYmU5MWUzMGU1MTU3-QLbKuNie9Lj9JD9F",
    "gaia-MzI0NDZiNGMtODgxYi00ZGI1LWE3MTgtZmJjNWJlYTc1YmJm-PA9wHpNfsSpPW4CP",
    "gaia-NTM0NjE1MWUtMzI1OC00MDVjLWFhODQtNzE2ZDMzMGRjZjhh-IYMd8ieLA1Tte5dn",
    "gaia-ZTQ2Y2E0MTUtZTRjOS00YTAxLWE4YWEtNzM4MjYyZDJlZWJj-ari4Kv-CAO9C32s4",
    "gaia-MTkzZjM5ZGMtNWIzYy00MjVmLTg2ZmUtNjBkNWY4ODdlODU1-LDCQ-f4Tj-dW7ZQ0",
    "gaia-ZDM4MzNkYmQtMTYwOC00YWUyLTljODAtYThjZThmMzVmNmMw-7B3plw7dMhmnAQOF",
    "gaia-MjBmNDFiMjEtNzA3ZS00NzA0LTgxZGQtMDAxYmYwYWMwNmNh-_5SIhnbRwh8mhR7n",
    "gaia-MzlhNTFlYzMtZDgwYS00NzMzLWJlMGMtNDlkODRiZjhkZTc2-RlWQT5v1BH_PC81i",
    "gaia-NGNiZTdiYmMtYTQ0OS00YzJiLWJkOTMtNjNkODhjMzUxMzk2-RfFtJz83qtNo74hd",
    "gaia-MzI0ZjUxYzAtNzNhYS00NTgwLTg2YTEtYWZmNzc2ZTY4MTQ2-1pGNnCvkCbUXN1bj",
    "gaia-MDY2NGE0OGMtNWYzMS00MTk2LWEyMjgtMjM1ZDE4NjljY2Uw-i_Gcdq2eq5XYj2mc",
    "gaia-NjhlZjJlOGQtYTc0NS00ZDQ5LWE2ZjAtMzM0NGZkZmJmNmIw-3Y6MvvlApKrOTR3X",
    "gaia-M2MxMzU1NzUtNThmMS00NmIzLTk4YTktZWY4YjI4Nzc4OGYz-1dyZSTB3JkYYXtIL",
    "gaia-MjE4MzIyMWEtZmRhZi00MDlhLTg4YTgtNWQ1ODVhOGEzMjc5-_vSGW1zRBV-9a2b4",
    "gaia-MTk2ZjlkMjgtN2EwOS00NzQ1LTkwZjUtY2U4NTdiOGE1ZDM0-ZXzT054DT5pikcDa",
    "gaia-YjNiMjUxZjItOTY0Ny00ZjFiLWFjNzgtOWUxOGZmYzVhOGVk-tVjIC7jnrzQ7uscQ",
    "gaia-OGJiNGJkNGMtZjU4Ny00NDA3LWIxYWYtNWU0NDBiOWE1MDFl-nU6ECFaowoI2jeYm",
    "gaia-MDRjYWVkMWQtOGU1NS00NDAxLWJlZGMtYjE0NjQ0ODcxNjMz-IpU6r_kx6waf08Hx",
    "gaia-MDc3NTg3MWMtMGZlMC00MzhmLWEwZDktYzcwNTI1ZjQxMGY1-gcaEqjUy9Pygyp1f",
    "gaia-YWU4NzQ0OGUtZWE4Ni00MGFjLWE3NmYtZjA3Y2E2N2U1YjJk-e11ZwdTJjSlHuKnH",
    "gaia-MjE2MDBkZWMtODQ2NS00OWE4LWJhZTYtZmViZDY4Yjc1NjA0-cmkqekLz0eGvq3hl",
    "gaia-NzkwYzIxMTUtYjIxOS00OWU5LWFlOTQtY2VkMjI1MDZmODIx-S29tJtuiVjqU7ZsC",
    "gaia-OWQ2MjdlMTAtZjUyZS00YjhlLTgxZTMtYzAzODIxOGYyMjJl-7hJlv2AoLfF5glzD",
    "gaia-ZDMxZmZjNjQtOWZhOC00N2ZkLTk2MTgtYjg3MWJlMWQ5YzIx-KYJS46vKoM_JAT-F",
    "gaia-OTZhOTQwNTctOGNhYi00ZmVmLWIyZDQtNjI1NDk3YWJhZmQ1-swax_vgRa4Qb7AKM",
    "gaia-ZDEzYmMzMTgtYzRhNy00MmVhLTliZWYtZTk4MDA0NTMyMTRm-Uu6UthSTxykQiFW-",
    "gaia-ZDAzYTJmZDEtOTAyMS00MzBmLTlhOGMtMWZjYWY2MDY2MjAx-ZbPPvU5T407kUGkV",
    "gaia-MTI5ZmU4MjctMTA3Zi00M2ZlLTk1YzYtYmFiMTI4MDdkOGIz-OldIYbMaH9XABXPU",
    "gaia-Nzc1Y2JhNGYtMTk2ZS00NTZlLTlhZjMtOTkzZWUwM2EyZGZi-fvOZeAg5QBgP-JG6",
    "gaia-N2FiZjk3ZWUtZjg2Yi00MDI2LWFkMmUtNzFhNjAzMWM0YTdk-l-cjtro95kNC52pV",
    "gaia-OTAwMWYxMjUtYWYwOC00MGIwLWJlN2YtNjcwMTBhMGRjNTli-mbITYuHEV-YbgBlh",
    "gaia-NDRmNWRlNTUtMDRkYi00MGY0LWEwMjctODcxNWQ0NjM1NTM4-i9rKEUKDKx3qOy2n",
    "gaia-ZGI5MTUxMDEtYWNjOC00Mzg3LWIzNDEtMzQ3OGZmY2Q4Yzk5-teqcHOdfj2XoFl3-",
    "gaia-Yjg5MzFhNjQtZGU5YS00ZmUzLWE1ZGYtZDZhOTY4ZDc3MGVm-Ef8HvNhFSVPZ6peM",
    "gaia-MWNlOTM5NjgtNjg2OS00MDg1LTg5YWEtMWE4ZDYyODlhM2I1-_OJLBhU9-Gq2ejA7",
    "gaia-ODljNThjYzctOTQ5MC00NDcwLWI4ZjMtMDA5YTIxYzZiZjE1-CYEyKdHpgA5xu5HD",
    "gaia-NzYxMjY5N2EtOTdlOC00NDAwLTk5NTctNWZjNmE2ZjUxY2Vi-57n2T7HezFP119Wl",
    "gaia-ODVhZjBhMTYtYzRjMS00NDlmLTgzODMtYzdjOTcxZjhkMDQx-aLBOYM07vFFAKnZZ",
    "gaia-NmIxNTU0NDgtZTk2Yy00NjUyLTllMjktZjYzNmY4MzVjZjE2-TgXx9blfiYYoF_T6",
    "gaia-ODI1OTI1ZDQtYjU0Yi00M2JiLTg5YzItNTVlNTFhZjAzNjkx-TBnSAiX9LE-3E5T2",
    "gaia-MGYwMmMzMzgtMDc2OS00OGZhLTlkYTktMWFmODI3ODMyNzE1-ZzM3Orn9jOIfSGw2",
    "gaia-YzVhYzA0OGItYjVkNy00Y2E4LWE5NmUtZGMzMjc4MTAzZGUy-thRu2jXnGEdDDPJg",
    "gaia-YTFmMjQ2NTktZjY3ZC00ZGU3LWFlZTgtMzNiZDAxY2Y3NWY1-hPdGMWSeb-9OEgua",
    "gaia-YzQ3MDY4MmYtNGNlNC00YmIwLTg2MDItNWQyNTM3NDZkMDlm-QVKYYpnvjMefVwgG",
    "gaia-NzQ5NjA0MzktMTU1NC00NjI4LWExMmMtNTI2NGNlY2NkMTZl-zDgNKzkOqdkP4hB7",
    "gaia-MWU2MjcwMDctYWE2Ni00ODZmLTgyZDEtMGMwNzZhYzJlYmY5-XoHWsKx_jIFchJG2",
    "gaia-ZTVjOTAzYjgtZWExNi00OGY2LThkMmYtZTAzODNlY2Y0NDk4-vyOlhgXN4CcWEmMv",
    "gaia-NzA2M2RlOTAtMjkwMS00NDViLThjODktYTY1ZDc3MmUyZTdj-wUtvsaoABREoM5u7",
    "gaia-ZTE2NjUyZGQtODA3OC00Y2EyLWE1MzctYjViOTI5ZmU5OTY4-Xq2JzWMLMBvcePL_",
    "gaia-ZDAzNmNjMzYtMWYxNi00Y2ZiLWI1ZTQtYTcxNmEzNmRkNmJk-r65EBYo268zStZTK",
    "gaia-MWYyYzExNTQtNTQ0ZS00NmU0LTg0MjQtYjYwMzk5ZWJmZGRj-CY4Iv8LerBnPc_9Q",
    "gaia-NjM4ZGI0MmUtY2QxZi00MWY1LWFkODctZGE1Y2YxYWM2ZWRi-S_bLFeiig720zk-L",
    "gaia-MDkzNzdhNTctZmE0OS00MmU5LTk1N2EtYjQwNzk5YTY0OWY0-YkLiOUttqQGhTet7",
    "gaia-MjE4OWU1ZjktMDVhYy00NDU4LTg0ZDUtNGIzZjBmYWQ3NDBi-BYz7VRPPGz_mJY4f",
    "gaia-MmEwYTc2MjktMTA3Yy00NWEwLWE1ZjQtZGFmYjljZTdmZmIy-k0ZidYOfiYnNnJjT",
    "gaia-NTllODA5MWYtYTViOS00YmE1LThkMDktOTAyNDc2NWViY2Nk-0iwj27quMguqJKfr",
    "gaia-NTY0Yjc5NzEtYjg1Zi00NjQxLWE5ZGYtNzkwMzk3NmYwOWI2-mej0ezwsSRmfGRxR",
    "gaia-NjRkNjI4NjctOWYwNi00NDIyLWJkZWMtMjAxODQwZWJkODBl-qlI7rOGGu2iHNf3G",
    "gaia-NTMzNDA0ZGUtNTA4ZC00ZjI1LWI4ODItZTlhMDc0M2I5NDE2-0pLDA6H60IguTlFN",
    "gaia-NTVhNGZhNDEtZDY0Ni00NjE4LTkyMWUtOTI4MzhkNmU1Mzc3-0T8FnicbVxIy-F0X",
    "gaia-ZmJjOWYxM2ItNDJkYi00YzU4LTk2ZDEtMTE1N2FjZDQ0NWZl-2oQm8J7PNq4lkw0Y",
    "gaia-OTg2OWY3OTItNjk5Yy00YWMwLWE1NzktMTNmYmM1ZTk4MWI3-r3dzC4RdJfg7kTwv",
    "gaia-NDQ1MGFmZTMtOTNlNi00MWNmLTk4ODctNzFlNzM2MDFiODMy-LiCudSoxn9DGl8yo",
    "gaia-NjVhMzY2MTgtZTg5NS00YzVjLThkZjEtY2NhNWMxYmU5NTZi-Fz2IhgTT6pVa6w7a",
    "gaia-YWZlMWIyYzYtMjkwYi00ZjU3LTkyY2MtYjA0Njg3MzhmNWM5-BJhoHbzcpJFjtpuV",
    "gaia-MjQ1YTVjZTItNDc2MS00M2RhLTgzOWItMmNmNWVmMmE2NGU2-sJJtKJ_hqr6dhemC",
    "gaia-OTQ1Mzg4ZDItYTFmYS00YTFkLWIxNWQtOTY2MDRhY2MwNDBm-3JKBtiATTAllq5Te",
    "gaia-NzFmMDM3YjQtYWFiNC00ZTRkLThjMmEtY2FkYzBlOGU0ZTA4-lgkZQPDTuIF1ZXPN",
    "gaia-NTQzYzI4YjUtMDU2NC00ODRkLWE5MDktZTdiZThmNWM5MjVl-m1yRuf-7ZvtCtGES",
    "gaia-MjE2NGQ1YjYtM2JkNi00Mjc4LTg1YWItODg4ZTBhYTlkZjQ1-BkswH57vm0SF6bOZ",
    "gaia-ZjhiMWU5YTgtYzYwMy00OWEwLWE4ZjEtNjUyZDE1N2ExMzg3-RtieFJdZddHNDnqa",
    "gaia-YmE0OGI3ZTItMzg1My00MTk4LWEyMTUtN2IzNWI0MDIxNWNi-wLfhFLn_d6GIs92X",
    "gaia-ZjkzODVjYjEtNzhhYi00MzExLTlhZjItYTE0Y2FiNjAyYjlh-vCVjV5wk-plsa-sa",
    "gaia-ZmU0NDY0NWYtZDYxMC00OTgzLThkZGYtODBhMDM3NjRkZjE3-mrNNlhlADpMgu2gy",
    "gaia-NTkzM2M4NjctYzg4MC00N2ViLTlkNzUtNmY0ODg0OWUyNDJj-IOzxVtjjhgNMhyth",
    "gaia-NjMxNWMxMGEtM2FiNS00ZjJhLWFlZWEtZDI0NTgwMzA4Y2M5-n3GA35SqcBV4BzrF"
]

# 问题列表（留空，由用户填写）
QUESTIONS = [
    "Who is the president of the United States",
    "What is the capital of Japan",
    "How does photosynthesis work",
    "Why is the sky blue",
    "Who wrote the book 1984",
    "Tell me a joke",
    "Can you create a short bedtime story",
    "What’s the best way to stay motivated",
    "If you could time travel where would you go",
    "What’s your favorite food",
    "If I have 5 apples and give 2 away how many do I have left",
    "What is 23 × 17",
    "Can you explain gravity in simple words",
    "How can I improve my memory",
    "What are some easy exercises to stay fit",
    "What are the best habits for success",
    "Can you describe a futuristic city",
    "Do you think AI will replace human jobs",
    "How do you define happiness",
    "What are the pros and cons of social media",
    "What are black holes, and how do they form?",
    "Explain the causes and effects of global warming.",
    "What were the main causes of World War II?",
    "How does the human brain process information and memory?",
    "What is artificial intelligence, and how is it impacting modern society?",
    "Explain the process of photosynthesis and its importance in the ecosystem.",
    "How does the stock market work, and what factors influence stock prices?",
    "What is quantum computing, and how is it different from classical computing?",
    "Explain the theory of evolution and its significance in biology.",
    "What are the major types of renewable energy sources, and how do they work?",
    "How does the immune system fight against diseases?",
    "What is the Big Bang Theory, and what evidence supports it?",
    "How do governments manage a country’s economy, and what are fiscal and monetary policies?",
    "What are the main principles of democracy, and why is it important?",
    "How do airplanes fly? Explain the principles of aerodynamics.",
    "What are the different layers of the Earth's atmosphere, and what are their characteristics?",
    "How do volcanoes erupt, and what are the different types of volcanic eruptions?",
    "What is the significance of the Industrial Revolution, and how did it change the world?",
    "How does the human digestive system work, and what are its main organs?",
    "What are the different types of economies (capitalism, socialism, communism), and how do they function?",
    "Explain the process of DNA replication and why it is important for living organisms.",
    "What are the major causes and consequences of deforestation?",
    "How does climate change affect biodiversity and ecosystems?",
    "What is the significance of space exploration, and what are some major space missions in history?",
    "How does the internet work, and what are the key technologies behind it?",
    "What are the effects of globalization on economies and cultures?",
    "What is cybersecurity, and why is it important in today’s digital world?",
    "How do electric cars work, and what are their benefits compared to traditional cars?",
    "What are the causes and impacts of ocean pollution?",
    "How does the human heart function, and what are its key components?",
    "What is nanotechnology, and what are its applications in medicine and engineering?",
    "How do vaccines work, and why are they important for public health?",
    "What are the differences between renewable and non-renewable resources?",
    "How do earthquakes occur, and what are the different types of seismic waves?",
    "What are genetic modifications, and how do they impact agriculture and medicine?",
    "Explain the process of the water cycle and its importance in nature.",
    "What are some of the biggest technological advancements of the 21st century?",
    "How do wireless communication technologies like 5G work?",
    "What are the key differences between different world religions?",
    "What are the main functions of the United Nations, and why was it formed?",
    "What is cryptocurrency, and how does blockchain technology work?",
    "How does artificial intelligence contribute to advancements in healthcare?",
    "What are some of the most significant scientific discoveries of the last decade?",
    "What is dark matter, and why is it important in astrophysics?",
    "How do different types of governments (democracy, monarchy, dictatorship) operate?",
    "What is the role of media in shaping public opinion and politics?",
    "How do climate change agreements like the Paris Agreement help the environment?",
    "What are the main principles of Einstein’s Theory of Relativity?",
    "How do space telescopes like Hubble and James Webb help us explore the universe?",
    "What is the history and significance of the Great Wall of China?",
    "How does artificial intelligence impact the job market and employment trends?",
    "What are the causes and effects of the Industrial and French Revolutions?",
    "How do submarines work, and what are their uses in military and research?",
    "What is the process of making and storing nuclear energy?",
    "How does the process of genetic engineering work in medicine and agriculture?",
    "What is the role of mitochondria in a cell, and why is it called the powerhouse?",
    "How do climate patterns like El Niño and La Niña impact global weather?",
    "What are the main challenges facing the world’s freshwater supply?",
    "What is cybercrime, and what measures are taken to prevent it?",
    "How does space travel affect the human body?",
    "What are the key differences between socialism and communism?",
    "How do forensic scientists solve crimes using DNA analysis?",
    "What are the biggest challenges in developing a sustainable future?",
    "How do black holes bend space and time, according to general relativity?",
    "What are the major ethical concerns surrounding artificial intelligence?",
    "How does deforestation contribute to climate change?",
    "What are the effects of pollution on marine life?",
    "How do wind turbines generate electricity?",
    "What are the main goals of the European Union, and how does it function?",
    "What is the importance of the ozone layer, and how can we protect it?",
    "How do satellites help in weather forecasting?",
    "What are the dangers of antibiotic resistance, and how can it be prevented?",
    "How does the human body fight against infections and diseases?",
    "What are the major theories about the origin of life on Earth?",
    "How does artificial intelligence work in self-driving cars?",
    "What is the role of big data in business and decision-making?",
    "How do solar panels work, and what are their benefits?",
    "What is the Fibonacci sequence, and where is it found in nature?",
    "How do different cultures influence global cuisine and fashion trends?",
    "What are the psychological effects of social media on human behavior?",
    "How do electric generators convert mechanical energy into electrical energy?",
    "What are the effects of war on a country’s economy and society?",
    "How do historians study ancient civilizations and their cultures?",
    "What is the process of desalination, and how can it solve water scarcity issues?",
    "What are the main challenges of interstellar travel?",
    "How do companies use artificial intelligence for customer service?",
    "What are the ethical concerns related to genetic cloning?",
    "How do environmental policies impact business and industries?",
    "What is the role of women in history, and how has it evolved over time?"
]

# SOCKS5代理配置
PROXY_HOST = "2f7121246ab53bad.abcproxy.vip"
PROXY_PORT = 4950
PROXY_USER = "ZHkxhTUspz-zone-abc"
PROXY_PASS = "76021475"

# 设置全局SOCKS5代理
socks.set_default_proxy(socks.SOCKS5, PROXY_HOST, PROXY_PORT, username=PROXY_USER, password=PROXY_PASS)
socket.socket = socks.socksocket

# 固定API端点
URL = "https://gaias.gaia.domains/v1/chat/completions"

# 计数器
success_count = 0
failure_count = 0
start_time = time.time()
last_stats_time = start_time  # 上次统计时间
stats_interval = 60  # 每60秒统计一次
minute_success = 0  # 每分钟成功次数
minute_failure = 0  # 每分钟失败次数
last_minute_start = start_time  # 每分钟开始时间

# ANSI颜色代码
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    PURPLE = '\033[95m'
    RESET = '\033[0m'

# 进度条函数
def progress_bar(success, failure, width=50):
    total = success + failure
    if total == 0:
        return "[暂无请求]"
    success_ratio = success / total
    success_width = int(width * success_ratio)
    failure_width = width - success_width
    return f"{Colors.GREEN}{'█' * success_width}{Colors.RED}{'█' * failure_width}{Colors.RESET} {success}/{total} ({success_ratio:.1%})"

def chat_with_gaia(api_key, api_index, question, thread_id):
    global success_count, failure_count, minute_success, minute_failure
    headers = {
        "Authorization": f"Bearer {api_key}",
        "accept": "application/json",
        "Content-Type": "application/json"
    }
    
    data = {
        "messages": [
            {"role": "system", "content": "你是一个有用的助手。"},
            {"role": "user", "content": question}
        ],
        "max_tokens": 50  # 减少响应长度
    }
    
    session = requests.Session()
    retries = Retry(total=5, backoff_factor=2, status_forcelist=[500, 502, 503, 504], allowed_methods=["POST"])
    session.mount("https://", HTTPAdapter(max_retries=retries))
    
    timestamp = datetime.now().strftime("%H:%M:%S")
    try:
        response = session.post(URL, headers=headers, json=data, timeout=15)  # 延长超时时间
        response.raise_for_status()
        success_count += 1
        minute_success += 1
        print(f"{Colors.PURPLE}🕒[{timestamp}] {Colors.GREEN}🎉【成功】线程-{thread_id} | 第{success_count}次成功 🌟{Colors.RESET}")
        return "SUCCESS"
    except requests.exceptions.RequestException as e:
        failure_count += 1
        minute_failure += 1
        print(f"{Colors.PURPLE}🕒[{timestamp}] {Colors.RED}💥【失败】线程-{thread_id} | 第{failure_count}次失败 ⚠️{Colors.RESET}")
        if hasattr(e.response, 'status_code'):
            if e.response.status_code == 401:
                print(f"{Colors.PURPLE}🕒[{timestamp}] {Colors.YELLOW}⚠️【错误】API {api_index} | 状态: 401 | API认证失败 🚫{Colors.RESET}")
                return "FAILURE"
            elif e.response.status_code == 402:
                print(f"{Colors.PURPLE}🕒[{timestamp}] {Colors.YELLOW}⚠️【错误】API {api_index} | 状态: 402 | API额度不足，需要充值 🚫{Colors.RESET}")
                return "FAILURE"
        return "FAILURE"

def auto_chat_concurrent():
    global success_count, failure_count, start_time, last_stats_time, minute_success, minute_failure, last_minute_start
    print(f"{Colors.BLUE}🚀 使用SOCKS5代理启动并发聊天（60线程，固定端点，每分钟统计） - 按 Ctrl+C 退出 ✨{Colors.RESET}")
    print(f"{Colors.CYAN}📊 总问题数: {len(QUESTIONS)} | 总API数: {len(API_KEYS)} 🌟{Colors.RESET}")
    print(f"{Colors.YELLOW}🔧 代理信息: {PROXY_USER}@{PROXY_HOST}:{PROXY_PORT}{Colors.RESET}")
    print(f"{Colors.YELLOW}📡 端点: {URL}{Colors.RESET}\n")
    
    active_api_keys = API_KEYS.copy()  # 使用所有API，不移除
    
    while True:
        try:
            if len(active_api_keys) < 60:
                print(f"{Colors.YELLOW}⚠️ 注意: 可用API数量 ({len(active_api_keys)}) 小于线程数 (60) 🚨{Colors.RESET}")
            
            # 随机选择所有可用问题和API Key
            batch_questions = random.sample(QUESTIONS, min(60, len(QUESTIONS)))
            batch_api_keys = random.sample(active_api_keys, min(60, len(active_api_keys)))
            
            # 使用线程池并发执行，动态调整线程数
            with ThreadPoolExecutor(max_workers=60) as executor:
                futures = [
                    executor.submit(chat_with_gaia, api_key, API_KEYS.index(api_key), q, i+1)
                    for i, (api_key, q) in enumerate(zip(batch_api_keys, batch_questions))
                ]
                
                # 检查结果
                for future in futures:
                    future.result()  # 仅检查结果，不移除API
            
            # 检查是否到达统计间隔（每分钟）
            current_time = time.time()
            elapsed_time = current_time - last_stats_time
            if elapsed_time >= stats_interval:
                total_minutes = int((current_time - start_time) // 60) + 1
                timestamp = datetime.now().strftime("%H:%M:%S")
                print(f"\n{Colors.BLUE}📈 🕒[{timestamp}] 第{total_minutes}分钟统计: {Colors.GREEN}成功: {success_count}次 🎉 {Colors.RED}失败: {failure_count}次 ⚠️{Colors.RESET}")
                print(f"{Colors.CYAN}📊 本分钟完成: {Colors.GREEN}{minute_success}次成功 🎉 {Colors.RED}{minute_failure}次失败 ⚠️{Colors.RESET}")
                print(f"{Colors.CYAN}📊 成功率: {progress_bar(success_count, failure_count)}{Colors.RESET}")
                print(f"{Colors.YELLOW}⏳ 运行时长: {int(current_time - start_time)}秒{Colors.RESET}\n")
                last_stats_time = current_time
                last_minute_start = current_time  # 重置分钟开始时间
                minute_success = 0  # 重置本分钟成功次数
                minute_failure = 0  # 重置本分钟失败次数
            
            # 如果没有可用API，退出
            if not active_api_keys:
                print(f"{Colors.RED}🚫 所有API均不可用，程序退出 💤{Colors.RESET}")
                break
            
        except KeyboardInterrupt:
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"\n{Colors.BLUE}🎬 🕒[{timestamp}] 程序已退出 | 总成功: {Colors.GREEN}{success_count}次 🎉{Colors.RESET} | 总失败: {Colors.RED}{failure_count}次 ⚠️{Colors.RESET}")
            print(f"{Colors.YELLOW}⏳ 总运行时长: {int(time.time() - start_time)}秒{Colors.RESET}")
            break
        except Exception as e:
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"{Colors.RED}🛑 🕒[{timestamp}] 主线程错误: {e} 🚨{Colors.RESET}")
            time.sleep(5)

if __name__ == "__main__":
    if not API_KEYS or not QUESTIONS:
        print(f"{Colors.RED}❌ 错误: 请在 API_KEYS 和 QUESTIONS 中填入数据 🚫{Colors.RESET}")
    else:
        auto_chat_concurrent()
